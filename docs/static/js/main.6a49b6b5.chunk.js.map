{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setImputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBF,OACA,0BAAMC,SAhBiB,SAACC,GAElBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEvCN,EAAc,OAQpB,2BACEO,KAAK,OACLC,YAAY,uBACZC,MAAOV,EACPW,SAzBsB,SAACR,GACvBF,EAAcE,EAAES,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACC,GACdC,EAFa,iDAEoCC,UAAWH,GAF/C,kBACC,GADD,sDAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAiBZM,GAjBY,4CAAH,sDCEPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGvC,OACA,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKS,GAAIA,EAAIO,IAAKN,IAC1B,2BAAIA,KCJCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAItB,ECJyB,SAACA,GAEzB,MAA0Bf,mBAAS,CAC/BsB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA0CA,OAxBAC,qBAAU,WAEPxB,EAASC,GACNwB,MAAM,SAAAC,GAEJC,YAAY,WAEXJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEZ,UAOP,CAACpB,IAMGqB,EDxCuBM,CAAc3B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEnB,OACI,oCACI,6BACA,wBAAIJ,UAAU,yCAAyChB,GAErDoB,GAAW,yBAAKH,IAAI,yBAAyBC,IAAI,WAAWF,UAAU,8CACvE,yBAAKA,UAAU,aAIRH,EAAOJ,KAAK,SAAAC,GAAG,OACf,kBAAC,EAAD,eACIkB,IAAKlB,EAAIC,IACTD,UEoBTmB,EAtCO,WAIlB,MAAoC5C,mBAAS,CAAC,aAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAYA,OACI,oCACA,4CAEA,kBAAC,EAAD,CAAaA,cAAiBA,IAItB8C,EAAWrB,KAAK,SAAAT,GAAQ,OAEpB,kBAAC,EAAD,CAEA4B,IAAK5B,EACLA,SAAUA,SC7B9B+B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.6a49b6b5.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes  from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setImputValue] = useState('');\r\n\r\n    const handleImputChange = (e) => {\r\n        setImputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        //Esto hace que no se refresque la página por defecto al enviar forms\r\n        e.preventDefault();  \r\n\r\n        // si la longitud , sin espacios, de valor del impurt es mayor a 0\r\n        if(inputValue.trim().length > 0){\r\n            // Añadimos el valor del input al array de categories\r\n            setCategories( cats => [inputValue, ...cats]); \r\n            // y vaciamos el inputValue para que no se repita\r\n            setImputValue('');\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n  return (\r\n  <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder='Inserta un Personaje'\r\n        value={inputValue}\r\n        onChange={handleImputChange}\r\n        >\r\n      </input>\r\n  </form>\r\n  )\r\n};\r\n\r\n/*Es buena practica poner las funciones y valores requeridos en los componentes \r\nPor si otro programador coge tus componentes... \r\n\r\na\r\nAqui indicamos que el componente AddCategory \r\nnecesita obligatoriamente de la función  setCategory\r\n*/\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n ","export const getGifs = async( category )=>{\r\n    const imgCantidad = 12;\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=${ imgCantidad }&api_key=7BuUctEE8JtXBENsMPpXpTFFTSH5LDBW`;\r\n    \r\n    const resp = await fetch(url);\r\n    //Desestructuración de data para que solo muestre lo que necesito\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n  }","import React from 'react';\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    \r\n  return (\r\n  <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} id={id} alt={title} />\r\n        <p>{title}</p>\r\n  </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n   // llamada al custom hooks useFetchGifs\r\n    \r\n   const {data:images, loading} = useFetchGifs( category );\r\n  \r\n    return (\r\n        <>\r\n            <hr></hr>\r\n            <h3 className='animate__animated animate__fadeInDown'>{category}</h3>\r\n\r\n            { loading && <img src='/loading-animation.gif' alt='Cargando' className='cargando animate__animated animate__pulse'></img>}\r\n             <div className=\"card-grid\">\r\n                {\r\n                    //mapeamos el array categories para que nos devuelva su contenido\r\n                    //desestructuramos para que nos devuelva el id y el title\r\n                    images.map( img =>(\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                    {...img}\r\n                    />\r\n                        //<li key={id} > {title} </li>\r\n                    ))\r\n                }\r\n            </div> \r\n        </>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n\r\n   \r\n   /*\r\n\r\n    Esto hace que cuando se cargue el componente por primera vez, lance la petición \r\n    para cargar las imagenes\r\n\r\n    coge los gifs getGif y los pone en setImages\r\n\r\n    Usamos useEffects de react para que no renderice la página \r\n    cada vez que note un cambio\r\n    \r\n    */ \r\n    useEffect(() => {\r\n        \r\n       getGifs( category )\r\n         .then( imgs => {\r\n\r\n            setTimeout( ()=>{\r\n\r\n             setState({\r\n                 data: imgs,\r\n                 loading: false\r\n             });\r\n            },3000);\r\n\r\n         })\r\n            \r\n           \r\n\r\n\r\n    }, [category]);\r\n\r\n\r\n    \r\n\r\n\r\n    return state;\r\n}","\r\nimport React,  {useState}  from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp  = () =>{\r\n\r\n    // const categories = ['Goku', 'pikachu', 'Vegetta'];\r\n\r\n    const [categories, setCategories] = useState(['Pikatchu']);\r\n\r\n    // función handleAdd\r\n    // const handleAdd = () =>{\r\n\r\n    //dos opciones que cogen todas las categorías y le añade heidy al final\r\n\r\n    // //setCategories( [...categories, 'Heidy']); \r\n    // setCategories( cats => [...cats, 'Heidy']); \r\n\r\n    //}\r\n\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        {/* añadimos el componente AddCategory*/}\r\n        <AddCategory setCategories = {setCategories}/>\r\n                \r\n            {\r\n                //mapeamos el array categories para que nos devuelva su contenido\r\n                categories.map( category =>(\r\n                    /* añadimos el componente GifGrid*/\r\n                    <GifGrid \r\n                    // el key es obligatorio y único\r\n                    key={category}\r\n                    category={category} \r\n                    />\r\n                ))\r\n            }\r\n        \r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  GifExpertApp  from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}